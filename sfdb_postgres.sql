-- Smart Farm - PostgreSQL schema and seed data (converted from MySQL dump)
-- Safe to run in pgAdmin against Railway Postgres
-- Notes:
-- - MySQL enums converted to PostgreSQL enums
-- - tinyint(1) -> boolean, json -> jsonb, datetime -> timestamp
-- - AUTO_INCREMENT -> GENERATED BY DEFAULT AS IDENTITY
-- - ON UPDATE CURRENT_TIMESTAMP not auto-emulated; add trigger if needed

BEGIN;

-- =========================
-- Enums
-- =========================
DO $$ BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'action_status_enum') THEN
    CREATE TYPE action_status_enum AS ENUM ('queued','sent','ack','error','timeout','failed');
  END IF;
END $$;

DO $$ BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'user_role_enum') THEN
    CREATE TYPE user_role_enum AS ENUM ('admin','farmer','viewer');
  END IF;
END $$;

DO $$ BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'user_status_enum') THEN
    CREATE TYPE user_status_enum AS ENUM ('active','inactive','suspended');
  END IF;
END $$;

-- =========================
-- Tables
-- =========================

-- users
CREATE TABLE IF NOT EXISTS "users" (
  "user_id" varchar(36) PRIMARY KEY,
  "email" varchar(100) NOT NULL UNIQUE,
  "password" varchar(255) NOT NULL,
  "first_name" varchar(100) NOT NULL,
  "last_name" varchar(100) NOT NULL,
  "phone" varchar(20),
  "role" user_role_enum NOT NULL DEFAULT 'farmer',
  "status" user_status_enum NOT NULL DEFAULT 'active',
  "address" text,
  "city" varchar(100),
  "country" varchar(100),
  "date_of_birth" date,
  "gender" varchar(10),
  "profile_picture" text,
  "last_login" timestamp,
  "reset_token" varchar(255),
  "reset_token_expires" timestamp,
  "created_at" timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- farms
CREATE TABLE IF NOT EXISTS "farms" (
  "farm_id" varchar(36) PRIMARY KEY,
  "name" varchar(100) NOT NULL,
  "location" text,
  "owner_id" varchar(36),
  CONSTRAINT "FK_farms_users"
    FOREIGN KEY ("owner_id") REFERENCES "users" ("user_id")
);

-- crops
CREATE TABLE IF NOT EXISTS "crops" (
  "crop_id" varchar(36) PRIMARY KEY,
  "name" varchar(100) NOT NULL,
  "description" text
);

-- devices
CREATE TABLE IF NOT EXISTS "devices" (
  "device_id" varchar(100) PRIMARY KEY,
  "name" varchar(255) NOT NULL,
  "location" varchar(255) NOT NULL,
  "status" varchar(255) NOT NULL,
  "farm_id" varchar(36) NOT NULL,
  CONSTRAINT "FK_devices_farms"
    FOREIGN KEY ("farm_id") REFERENCES "farms" ("farm_id")
);

-- action_logs
CREATE TABLE IF NOT EXISTS "action_logs" (
  "id" varchar(36) PRIMARY KEY,
  "created_at" timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "trigger_source" varchar(10) NOT NULL,
  "device_id" varchar(100) NOT NULL,
  "sensor_id" varchar(100),
  "sensor_type" varchar(50),
  "value" double precision,
  "unit" varchar(20),
  "violation_type" varchar(30),
  "action_uri" varchar(255) NOT NULL,
  "status" action_status_enum NOT NULL,
  "topic" varchar(255),
  "error_message" text,
  "payload" jsonb,
  "action_id" varchar(100),
  "action_type" varchar(20),
  "qos_level" integer,
  "retain_flag" boolean,
  "sent_at" timestamp,
  "ack_at" timestamp,
  "timeout_at" timestamp,
  "failed_at" timestamp,
  "retry_count" integer NOT NULL DEFAULT 0,
  "max_retries" integer NOT NULL DEFAULT 1
);

CREATE INDEX IF NOT EXISTS "IDX_action_logs_device" ON "action_logs" ("device_id");
CREATE INDEX IF NOT EXISTS "IDX_action_logs_sensor" ON "action_logs" ("sensor_id");
CREATE INDEX IF NOT EXISTS "IDX_action_logs_action_id" ON "action_logs" ("action_id");

-- notifications
CREATE TABLE IF NOT EXISTS "notifications" (
  "id" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  "user_id" varchar(36) NOT NULL,
  "level" varchar(10) NOT NULL,
  "source" varchar(20) NOT NULL,
  "title" varchar(200) NOT NULL,
  "message" text,
  "context" jsonb,
  "is_read" boolean NOT NULL DEFAULT false,
  "created_at" timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT "fk_notifications_user"
    FOREIGN KEY ("user_id") REFERENCES "users" ("user_id") ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS "idx_notifications_user_read_created"
  ON "notifications" ("user_id","is_read","created_at");
CREATE INDEX IF NOT EXISTS "idx_notifications_created"
  ON "notifications" ("created_at");

-- sensor_readings
CREATE TABLE IF NOT EXISTS "sensor_readings" (
  "id" varchar(36) PRIMARY KEY,
  "sensor_id" varchar(36) NOT NULL,
  "value1" double precision,
  "value2" double precision,
  "createdAt" timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS "IDX_sensor_readings_sensor_id"
  ON "sensor_readings" ("sensor_id");

-- sensors
CREATE TABLE IF NOT EXISTS "sensors" (
  "id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "sensor_id" varchar(36) NOT NULL,
  "farm_id" varchar(100) NOT NULL,
  "type" varchar(50) NOT NULL,
  "unit" varchar(20) NOT NULL,
  "device_id" varchar(100) NOT NULL,
  "location" varchar(100),
  "crop_id" varchar(36),
  "min_critical" numeric(10,2),
  "min_warning" numeric(10,2),
  "max_warning" numeric(10,2),
  "max_critical" numeric(10,2),
  "action_low" text,
  "action_high" text,
  CONSTRAINT "FK_sensors_farms"
    FOREIGN KEY ("farm_id") REFERENCES "farms" ("farm_id"),
  CONSTRAINT "FK_sensors_crops"
    FOREIGN KEY ("crop_id") REFERENCES "crops" ("crop_id"),
  CONSTRAINT "FK_sensors_devices"
    FOREIGN KEY ("device_id") REFERENCES "devices" ("device_id")
);

CREATE INDEX IF NOT EXISTS "IDX_sensors_farm_id" ON "sensors" ("farm_id");
CREATE INDEX IF NOT EXISTS "IDX_sensors_crop_id" ON "sensors" ("crop_id");
CREATE INDEX IF NOT EXISTS "IDX_sensors_device_id" ON "sensors" ("device_id");

-- migrations
CREATE TABLE IF NOT EXISTS "migrations" (
  "id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "timestamp" bigint NOT NULL,
  "name" varchar(255) NOT NULL
);

-- =========================
-- Seed data (from provided dump excerpts)
-- =========================

-- users
INSERT INTO "users"
("user_id","email","password","first_name","last_name","phone","role","status","address","city","country","date_of_birth","gender","profile_picture","last_login","reset_token","reset_token_expires","created_at","updated_at")
VALUES
('32b2c284-7ffd-4b65-9223-285f3f4f82e6','oussema.jomaaa@gmail.com','$2b$10$qg5ifFfKGsKVA/53TDqyoeXU9z3mOxY3CIBECE0DJtXMLG7a4xvDm','oussama','jomaa','58577690','farmer','active',NULL,NULL,NULL,NULL,NULL,NULL,'2025-10-05 09:24:14',NULL,NULL,'2025-09-29 03:23:49.866347','2025-10-05 09:24:14.000000')
ON CONFLICT ("user_id") DO NOTHING;

INSERT INTO "users"
("user_id","email","password","first_name","last_name","phone","role","status","address","city","country","date_of_birth","gender","profile_picture","last_login","reset_token","reset_token_expires","created_at","updated_at")
VALUES
('user-001-sample-uuid-here','farmer@example.com','$2b$10$K7L/oQNkjF5Ej5zXcP8nNOq8rJ9mK2L8nP4qR6sT8uV0wX2yZ4aB6','John','Farmer',NULL,'farmer','active',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'2025-08-13 03:47:29.300287','2025-08-13 03:47:29.300287')
ON CONFLICT ("user_id") DO NOTHING;

-- farms
INSERT INTO "farms" ("farm_id","name","location","owner_id") VALUES
('ab873638-7589-11f0-81f9-508140fba651','Feedin','Mornag, Tunisia','32b2c284-7ffd-4b65-9223-285f3f4f82e6'),
('ab873638-7589-11f0-81f9-508140fba652','Chahia','Ben Arous','32b2c284-7ffd-4b65-9223-285f3f4f82e6')
ON CONFLICT ("farm_id") DO NOTHING;

-- devices
INSERT INTO "devices" ("device_id","name","location","status","farm_id") VALUES
('dht11H','DHT11 Sensor','Green house 1','offline','ab873638-7589-11f0-81f9-508140fba651')
ON CONFLICT ("device_id") DO NOTHING;

-- crops (empty by default)

-- sensors
INSERT INTO "sensors"
("id","sensor_id","farm_id","type","unit","device_id","location","crop_id","min_critical","min_warning","max_warning","max_critical","action_low","action_high")
VALUES
(1,'dht11','ab873638-7589-11f0-81f9-508140fba651','temperature','°C','dht11H','Green house 1',NULL,15.00,17.00,28.00,50.00,'mqtt:smartfarm/actuators/dht11H/ventilator_off','mqtt:smartfarm/actuators/dht11H/ventilator_on'),
(2,'dht11','ab873638-7589-11f0-81f9-508140fba651','humidity','%','dht11H','Green house 1',NULL,60.00,62.00,73.00,75.00,'mqtt:smartfarm/actuators/dht11H/humidifier_on','mqtt:smartfarm/actuators/dht11H/open_roof'),
(3,'YL-69','ab873638-7589-11f0-81f9-508140fba651','humidity','%','dht11H','Greenhouse 1',NULL,0.00,0.00,0.80,1.00,'mqtt:smartfarm/actuators/dht11H/water_pump_on',NULL),
(4,'BH1750','ab873638-7589-11f0-81f9-508140fba651','light','lux','dht11H','Greenhouse 1',NULL,200.00,300.00,900.00,1000.00,'mqtt:smartfarm/actuators/dht11H/light_on',NULL)
ON CONFLICT ("id") DO NOTHING;

-- notifications (no seed rows in excerpt)

-- action_logs (no seed rows in excerpt)

-- sensor_readings
-- Example row (you can paste more if needed):
INSERT INTO "sensor_readings" ("id","sensor_id","value1","value2","createdAt") VALUES
('0028dcef-4121-4272-85fa-1d3be6afd26d','dht11',24.9,68.1,'2025-10-05 09:41:28.062407')
ON CONFLICT ("id") DO NOTHING;

COMMIT;

-- Import instructions (pgAdmin):
-- 1) Open pgAdmin → your Railway database → Tools → Query Tool
-- 2) Load this file and execute (lightning icon). Ensure no errors are reported.
-- 3) If you want to add more sensor_readings rows from your MySQL dump,
--    paste INSERT lines below the example and execute again.


